
keypress_wireless_motion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000070  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000398  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000151  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000038a  00000000  00000000  00000729  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000128  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000240  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USARTInit>:
#include<avr/io.h>
#include<util/delay.h>

void USARTInit () {
   UBRRL = 103;
  6c:	87 e6       	ldi	r24, 0x67	; 103
  6e:	89 b9       	out	0x09, r24	; 9
   UBRRH = 0;
  70:	10 bc       	out	0x20, r1	; 32


   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  76:	88 ed       	ldi	r24, 0xD8	; 216
  78:	8a b9       	out	0x0a, r24	; 10
}
  7a:	08 95       	ret

0000007c <USARTReadChar>:

char USARTReadChar()
{
   while(!(UCSRA & (1<<RXC)))
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
  80:	8c b1       	in	r24, 0x0c	; 12
}
  82:	08 95       	ret

00000084 <forward>:

void forward()	// verified
{
	PORTB = 0b00001000;
  84:	88 e0       	ldi	r24, 0x08	; 8
  86:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00010000;
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	82 bb       	out	0x12, r24	; 18

}
  8c:	08 95       	ret

0000008e <backward>:

void backward()		// verified
{
	PORTB = 0b00000000;
  8e:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
  90:	80 ea       	ldi	r24, 0xA0	; 160
  92:	82 bb       	out	0x12, r24	; 18
}
  94:	08 95       	ret

00000096 <stop>:

void stop()		// hard stop
{
	PORTB = 0b00001000;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10110000;
  9a:	80 eb       	ldi	r24, 0xB0	; 176
  9c:	82 bb       	out	0x12, r24	; 18

}
  9e:	08 95       	ret

000000a0 <left>:

void left()		// verified
{
	PORTB = 0b00000000;
  a0:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	82 bb       	out	0x12, r24	; 18

}
  a6:	08 95       	ret

000000a8 <right>:

void right()	// verified
{
	PORTB = 0b00001000;
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00000000;
  ac:	12 ba       	out	0x12, r1	; 18



}
  ae:	08 95       	ret

000000b0 <main>:
#include<avr/io.h>
#include<util/delay.h>

void USARTInit () {
   UBRRL = 103;
  b0:	87 e6       	ldi	r24, 0x67	; 103
  b2:	89 b9       	out	0x09, r24	; 9
   UBRRH = 0;
  b4:	10 bc       	out	0x20, r1	; 32


   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	80 bd       	out	0x20, r24	; 32
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  ba:	88 ed       	ldi	r24, 0xD8	; 216
  bc:	8a b9       	out	0x0a, r24	; 10
}

void main () {
	USARTInit();

	DDRA = 0x03;
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	8a bb       	out	0x1a, r24	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	49 e1       	ldi	r20, 0x19	; 25
  c4:	50 e0       	ldi	r21, 0x00	; 0

}

void right()	// verified
{
	PORTB = 0b00001000;
  c6:	68 e0       	ldi	r22, 0x08	; 8
}

void forward()	// verified
{
	PORTB = 0b00001000;
	PORTD = 0b00010000;
  c8:	30 e1       	ldi	r19, 0x10	; 16
}

void backward()		// verified
{
	PORTB = 0b00000000;
	PORTD = 0b10100000;
  ca:	70 ea       	ldi	r23, 0xA0	; 160
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
}

char USARTReadChar()
{
   while(!(UCSRA & (1<<RXC)))
  cc:	5f 9b       	sbis	0x0b, 7	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x1c>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
  d0:	2c b1       	in	r18, 0x0c	; 12
  d2:	88 e8       	ldi	r24, 0x88	; 136
  d4:	93 e1       	ldi	r25, 0x13	; 19
  d6:	fa 01       	movw	r30, r20
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  de:	d9 f7       	brne	.-10     	; 0xd6 <main+0x26>
	
	while(1) {
		data = USARTReadChar();
		_delay_ms(500);
		
		if(data)
  e0:	22 23       	and	r18, r18
  e2:	69 f1       	breq	.+90     	; 0x13e <main+0x8e>
   return UDR;
}

void forward()	// verified
{
	PORTB = 0b00001000;
  e4:	68 bb       	out	0x18, r22	; 24
	PORTD = 0b00010000;
  e6:	32 bb       	out	0x12, r19	; 18
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	9e e4       	ldi	r25, 0x4E	; 78
  ec:	fa 01       	movw	r30, r20
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d9 f7       	brne	.-10     	; 0xec <main+0x3c>
			forward();
			_delay_ms(2000);
		}


		if (data == '1')	{
  f6:	21 33       	cpi	r18, 0x31	; 49
  f8:	51 f4       	brne	.+20     	; 0x10e <main+0x5e>
   return UDR;
}

void forward()	// verified
{
	PORTB = 0b00001000;
  fa:	68 bb       	out	0x18, r22	; 24
	PORTD = 0b00010000;
  fc:	32 bb       	out	0x12, r19	; 18
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	9e e4       	ldi	r25, 0x4E	; 78
 102:	fa 01       	movw	r30, r20
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	d9 f7       	brne	.-10     	; 0x102 <main+0x52>
 10c:	df cf       	rjmp	.-66     	; 0xcc <main+0x1c>
			forward();
			_delay_ms(2000);
			
		}

		if (data == '2') {
 10e:	22 33       	cpi	r18, 0x32	; 50
 110:	51 f4       	brne	.+20     	; 0x126 <main+0x76>

}

void backward()		// verified
{
	PORTB = 0b00000000;
 112:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
 114:	72 bb       	out	0x12, r23	; 18
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	9e e4       	ldi	r25, 0x4E	; 78
 11a:	fa 01       	movw	r30, r20
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 122:	d9 f7       	brne	.-10     	; 0x11a <main+0x6a>
 124:	d3 cf       	rjmp	.-90     	; 0xcc <main+0x1c>
		if (data == '2') {
			backward();
			_delay_ms(2000);
		}

		if (data == '3') {
 126:	23 33       	cpi	r18, 0x33	; 51
 128:	51 f4       	brne	.+20     	; 0x13e <main+0x8e>

}

void left()		// verified
{
	PORTB = 0b00000000;
 12a:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
 12c:	32 bb       	out	0x12, r19	; 18
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	9e e4       	ldi	r25, 0x4E	; 78
 132:	fa 01       	movw	r30, r20
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <main+0x82>
 13c:	c7 cf       	rjmp	.-114    	; 0xcc <main+0x1c>
		if (data == '3') {
			left();
			_delay_ms(2000);
		}

		if (data == '4') {
 13e:	24 33       	cpi	r18, 0x34	; 52
 140:	09 f0       	breq	.+2      	; 0x144 <main+0x94>
 142:	c4 cf       	rjmp	.-120    	; 0xcc <main+0x1c>

}

void right()	// verified
{
	PORTB = 0b00001000;
 144:	68 bb       	out	0x18, r22	; 24
	PORTD = 0b00000000;
 146:	12 ba       	out	0x12, r1	; 18
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	9e e4       	ldi	r25, 0x4E	; 78
 14c:	fa 01       	movw	r30, r20
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 152:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 154:	d9 f7       	brne	.-10     	; 0x14c <main+0x9c>
 156:	ba cf       	rjmp	.-140    	; 0xcc <main+0x1c>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
