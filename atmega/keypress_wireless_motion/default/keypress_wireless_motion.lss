
keypress_wireless_motion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000099  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002c5  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013c  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000340  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000b0  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000149  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000058  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000f0  00000000  00000000  00000bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USARTInit>:
#include<avr/io.h>
#include<util/delay.h>

void USARTInit () {
   UBRRL = 6;
  6c:	86 e0       	ldi	r24, 0x06	; 6
  6e:	89 b9       	out	0x09, r24	; 9
   UBRRH = 0;
  70:	10 bc       	out	0x20, r1	; 32
   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  76:	88 ed       	ldi	r24, 0xD8	; 216
  78:	8a b9       	out	0x0a, r24	; 10
}
  7a:	08 95       	ret

0000007c <USARTReadChar>:

char USARTReadChar()
{
   while(!(UCSRA & (1<<RXC)))
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <USARTReadChar>
   {
   }
   return UDR;
  80:	8c b1       	in	r24, 0x0c	; 12
}
  82:	08 95       	ret

00000084 <USARTWriteChar>:

void USARTWriteChar(char data)
{
	while(!(UCSRA & (1<<UDRE)))
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <USARTWriteChar>
   {
   }
	UDR=data;
  88:	8c b9       	out	0x0c, r24	; 12
}
  8a:	08 95       	ret

0000008c <motion_pin_config>:


void motion_pin_config()
{
	DDRB |= 0b00001000;
  8c:	bb 9a       	sbi	0x17, 3	; 23
	DDRD |= 0b10110000;
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	80 6b       	ori	r24, 0xB0	; 176
  92:	81 bb       	out	0x11, r24	; 17
}
  94:	08 95       	ret

00000096 <forward>:

void forward()	// verified
{
	PORTB = 0b00001000;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00010000;
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	82 bb       	out	0x12, r24	; 18

}
  9e:	08 95       	ret

000000a0 <backward>:

void backward()		// verified
{
	PORTB = 0b00000000;
  a0:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
  a2:	80 ea       	ldi	r24, 0xA0	; 160
  a4:	82 bb       	out	0x12, r24	; 18
}
  a6:	08 95       	ret

000000a8 <stop>:

void stop()		// hard stop
{
	PORTB = 0b00001000;
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10110000;
  ac:	80 eb       	ldi	r24, 0xB0	; 176
  ae:	82 bb       	out	0x12, r24	; 18

}
  b0:	08 95       	ret

000000b2 <left>:

void left()		// verified
{
	PORTB = 0b00000000;
  b2:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	82 bb       	out	0x12, r24	; 18

}
  b8:	08 95       	ret

000000ba <right>:

void right()	// verified
{
	PORTB = 0b00001000;
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00000000;
  be:	12 ba       	out	0x12, r1	; 18
}
  c0:	08 95       	ret

000000c2 <main>:
#include<avr/io.h>
#include<util/delay.h>

void USARTInit () {
   UBRRL = 6;
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	89 b9       	out	0x09, r24	; 9
   UBRRH = 0;
  c6:	10 bc       	out	0x20, r1	; 32
   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	80 bd       	out	0x20, r24	; 32
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  cc:	88 ed       	ldi	r24, 0xD8	; 216
  ce:	8a b9       	out	0x0a, r24	; 10
}


void motion_pin_config()
{
	DDRB |= 0b00001000;
  d0:	bb 9a       	sbi	0x17, 3	; 23
	DDRD |= 0b10110000;
  d2:	81 b3       	in	r24, 0x11	; 17
  d4:	80 6b       	ori	r24, 0xB0	; 176
  d6:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	48 ea       	ldi	r20, 0xA8	; 168
  da:	51 e6       	ldi	r21, 0x61	; 97

}

void right()	// verified
{
	PORTB = 0b00001000;
  dc:	38 e0       	ldi	r19, 0x08	; 8
  de:	60 e5       	ldi	r22, 0x50	; 80
  e0:	73 ec       	ldi	r23, 0xC3	; 195
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
	PORTD = 0b10110000;
  e2:	e0 eb       	ldi	r30, 0xB0	; 176
}

void left()		// verified
{
	PORTB = 0b00000000;
	PORTD = 0b00010000;
  e4:	f0 e1       	ldi	r31, 0x10	; 16
}

void backward()		// verified
{
	PORTB = 0b00000000;
	PORTD = 0b10100000;
  e6:	a0 ea       	ldi	r26, 0xA0	; 160
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
}

char USARTReadChar()
{
   while(!(UCSRA & (1<<RXC)))
  e8:	5f 9b       	sbis	0x0b, 7	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <main+0x26>
   {
   }
   return UDR;
  ec:	2c b1       	in	r18, 0x0c	; 12
  ee:	ca 01       	movw	r24, r20
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x2e>
			_delay_ms(500);
		}
	//	USARTWriteChar(data);
*/		

		if (data == 'F')	{
  f4:	26 34       	cpi	r18, 0x46	; 70
  f6:	11 f4       	brne	.+4      	; 0xfc <main+0x3a>
	DDRD |= 0b10110000;
}

void forward()	// verified
{
	PORTB = 0b00001000;
  f8:	38 bb       	out	0x18, r19	; 24
  fa:	08 c0       	rjmp	.+16     	; 0x10c <main+0x4a>
			stop();
			_delay_ms(100);
			
		}

		if (data == 'B') {
  fc:	22 34       	cpi	r18, 0x42	; 66
  fe:	19 f4       	brne	.+6      	; 0x106 <main+0x44>

}

void backward()		// verified
{
	PORTB = 0b00000000;
 100:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
 102:	a2 bb       	out	0x12, r26	; 18
 104:	09 c0       	rjmp	.+18     	; 0x118 <main+0x56>
			_delay_ms(200);
			stop();
			_delay_ms(100);
		}

		if (data == 'L') {
 106:	2c 34       	cpi	r18, 0x4C	; 76
 108:	19 f4       	brne	.+6      	; 0x110 <main+0x4e>

}

void left()		// verified
{
	PORTB = 0b00000000;
 10a:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
 10c:	f2 bb       	out	0x12, r31	; 18
 10e:	04 c0       	rjmp	.+8      	; 0x118 <main+0x56>
			_delay_ms(200);
			stop();
			_delay_ms(100);
		}

		if (data == 'R') {
 110:	22 35       	cpi	r18, 0x52	; 82
 112:	51 f7       	brne	.-44     	; 0xe8 <main+0x26>

}

void right()	// verified
{
	PORTB = 0b00001000;
 114:	38 bb       	out	0x18, r19	; 24
	PORTD = 0b00000000;
 116:	12 ba       	out	0x12, r1	; 18
 118:	cb 01       	movw	r24, r22
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x58>
	PORTD = 0b10100000;
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
 11e:	38 bb       	out	0x18, r19	; 24
	PORTD = 0b10110000;
 120:	e2 bb       	out	0x12, r30	; 18
 122:	ca 01       	movw	r24, r20
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x62>
 128:	df cf       	rjmp	.-66     	; 0xe8 <main+0x26>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
