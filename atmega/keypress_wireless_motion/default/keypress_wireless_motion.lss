
keypress_wireless_motion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000086  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003d5  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013e  00000000  00000000  0000063f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003ca  00000000  00000000  0000077d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  00000b48  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013a  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000220  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USARTInit>:
#include<avr/io.h>
#include<util/delay.h>

void USARTInit () {
   UBRRL = 51;
  6c:	83 e3       	ldi	r24, 0x33	; 51
  6e:	89 b9       	out	0x09, r24	; 9
   UBRRH = 0;
  70:	10 bc       	out	0x20, r1	; 32


   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  76:	88 ed       	ldi	r24, 0xD8	; 216
  78:	8a b9       	out	0x0a, r24	; 10
}
  7a:	08 95       	ret

0000007c <USARTReadChar>:

char USARTReadChar()
{
   while(!(UCSRA & (1<<RXC)))
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
  80:	8c b1       	in	r24, 0x0c	; 12
}
  82:	08 95       	ret

00000084 <forward>:

void forward()	// verified
{
	PORTB = 0b00001000;
  84:	88 e0       	ldi	r24, 0x08	; 8
  86:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00010000;
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	82 bb       	out	0x12, r24	; 18

}
  8c:	08 95       	ret

0000008e <backward>:

void backward()		// verified
{
	PORTB = 0b00000000;
  8e:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
  90:	80 ea       	ldi	r24, 0xA0	; 160
  92:	82 bb       	out	0x12, r24	; 18
}
  94:	08 95       	ret

00000096 <stop>:

void stop()		// hard stop
{
	PORTB = 0b00001000;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10110000;
  9a:	80 eb       	ldi	r24, 0xB0	; 176
  9c:	82 bb       	out	0x12, r24	; 18

}
  9e:	08 95       	ret

000000a0 <left>:

void left()		// verified
{
	PORTB = 0b00000000;
  a0:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	82 bb       	out	0x12, r24	; 18

}
  a6:	08 95       	ret

000000a8 <right>:

void right()	// verified
{
	PORTB = 0b00001000;
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00000000;
  ac:	12 ba       	out	0x12, r1	; 18



}
  ae:	08 95       	ret

000000b0 <motion_pin_config>:

void motion_pin_config()
{
	DDRB = 0b00001000;
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b10110000;
  b4:	80 eb       	ldi	r24, 0xB0	; 176
  b6:	81 bb       	out	0x11, r24	; 17
}
  b8:	08 95       	ret

000000ba <main>:
#include<avr/io.h>
#include<util/delay.h>

void USARTInit () {
   UBRRL = 51;
  ba:	83 e3       	ldi	r24, 0x33	; 51
  bc:	89 b9       	out	0x09, r24	; 9
   UBRRH = 0;
  be:	10 bc       	out	0x20, r1	; 32


   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  c4:	88 ed       	ldi	r24, 0xD8	; 216
  c6:	8a b9       	out	0x0a, r24	; 10

}

void motion_pin_config()
{
	DDRB = 0b00001000;
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b10110000;
  cc:	80 eb       	ldi	r24, 0xB0	; 176
  ce:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	49 e1       	ldi	r20, 0x19	; 25
  d2:	50 e0       	ldi	r21, 0x00	; 0
   return UDR;
}

void forward()	// verified
{
	PORTB = 0b00001000;
  d4:	38 e0       	ldi	r19, 0x08	; 8
	PORTD = 0b00010000;
  d6:	60 e1       	ldi	r22, 0x10	; 16
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
	PORTD = 0b10110000;
  d8:	a0 eb       	ldi	r26, 0xB0	; 176
}

void backward()		// verified
{
	PORTB = 0b00000000;
	PORTD = 0b10100000;
  da:	70 ea       	ldi	r23, 0xA0	; 160
   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
}

char USARTReadChar()
{
   while(!(UCSRA & (1<<RXC)))
  dc:	5f 9b       	sbis	0x0b, 7	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x22>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
  e0:	2c b1       	in	r18, 0x0c	; 12
  e2:	88 e8       	ldi	r24, 0x88	; 136
  e4:	93 e1       	ldi	r25, 0x13	; 19
  e6:	fa 01       	movw	r30, r20
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x2c>
		data = USARTReadChar();
		_delay_ms(500);



		if(data)
  f0:	22 23       	and	r18, r18
  f2:	a1 f3       	breq	.-24     	; 0xdc <main+0x22>
   return UDR;
}

void forward()	// verified
{
	PORTB = 0b00001000;
  f4:	38 bb       	out	0x18, r19	; 24
	PORTD = 0b00010000;
  f6:	62 bb       	out	0x12, r22	; 18
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	9e e4       	ldi	r25, 0x4E	; 78
  fc:	fa 01       	movw	r30, r20
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <main+0x42>
	PORTD = 0b10100000;
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
 106:	38 bb       	out	0x18, r19	; 24
	PORTD = 0b10110000;
 108:	a2 bb       	out	0x12, r26	; 18
			_delay_ms(2000);

			stop();
		}

		if (data == 1)	{
 10a:	21 30       	cpi	r18, 0x01	; 1
 10c:	51 f4       	brne	.+20     	; 0x122 <main+0x68>
   return UDR;
}

void forward()	// verified
{
	PORTB = 0b00001000;
 10e:	38 bb       	out	0x18, r19	; 24
	PORTD = 0b00010000;
 110:	62 bb       	out	0x12, r22	; 18
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	9e e4       	ldi	r25, 0x4E	; 78
 116:	fa 01       	movw	r30, r20
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11e:	d9 f7       	brne	.-10     	; 0x116 <main+0x5c>
 120:	dd cf       	rjmp	.-70     	; 0xdc <main+0x22>
			forward();
			_delay_ms(2000);
			
		}

		if (data == 2) {
 122:	22 30       	cpi	r18, 0x02	; 2
 124:	51 f4       	brne	.+20     	; 0x13a <main+0x80>

}

void backward()		// verified
{
	PORTB = 0b00000000;
 126:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
 128:	72 bb       	out	0x12, r23	; 18
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	fa 01       	movw	r30, r20
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 134:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 136:	d9 f7       	brne	.-10     	; 0x12e <main+0x74>
 138:	d1 cf       	rjmp	.-94     	; 0xdc <main+0x22>
		if (data == 2) {
			backward();
			_delay_ms(2000);
		}

		if (data == 3) {
 13a:	23 30       	cpi	r18, 0x03	; 3
 13c:	51 f4       	brne	.+20     	; 0x152 <main+0x98>

}

void left()		// verified
{
	PORTB = 0b00000000;
 13e:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
 140:	62 bb       	out	0x12, r22	; 18
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	9e e4       	ldi	r25, 0x4E	; 78
 146:	fa 01       	movw	r30, r20
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14e:	d9 f7       	brne	.-10     	; 0x146 <main+0x8c>
 150:	c5 cf       	rjmp	.-118    	; 0xdc <main+0x22>
		if (data == 3) {
			left();
			_delay_ms(2000);
		}

		if (data == 4) {
 152:	24 30       	cpi	r18, 0x04	; 4
 154:	09 f0       	breq	.+2      	; 0x158 <main+0x9e>
 156:	c2 cf       	rjmp	.-124    	; 0xdc <main+0x22>

}

void right()	// verified
{
	PORTB = 0b00001000;
 158:	38 bb       	out	0x18, r19	; 24
	PORTD = 0b00000000;
 15a:	12 ba       	out	0x12, r1	; 18
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	9e e4       	ldi	r25, 0x4E	; 78
 160:	fa 01       	movw	r30, r20
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 166:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 168:	d9 f7       	brne	.-10     	; 0x160 <main+0xa6>
 16a:	b8 cf       	rjmp	.-144    	; 0xdc <main+0x22>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
