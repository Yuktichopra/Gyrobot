
Gyrobot_basic_motion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005e  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000256  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000131  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000283  00000000  00000000  0000054b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000010d  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b0  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000a0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <forward>:
#include<util/delay.h>


void forward()	// verified
{
	PORTB = 0b00001000;
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00010000;
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	82 bb       	out	0x12, r24	; 18

}
  74:	08 95       	ret

00000076 <backward>:

void backward()		// verified
{
	PORTB = 0b00000000;
  76:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
  78:	80 ea       	ldi	r24, 0xA0	; 160
  7a:	82 bb       	out	0x12, r24	; 18
}
  7c:	08 95       	ret

0000007e <stop>:

void stop()		// hard stop
{
	PORTB = 0b00001000;
  7e:	88 e0       	ldi	r24, 0x08	; 8
  80:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10110000;
  82:	80 eb       	ldi	r24, 0xB0	; 176
  84:	82 bb       	out	0x12, r24	; 18

}
  86:	08 95       	ret

00000088 <left>:

void left()		// verified
{
	PORTB = 0b00000000;
  88:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	82 bb       	out	0x12, r24	; 18

}
  8e:	08 95       	ret

00000090 <right>:

void right()	// verified
{
	PORTB = 0b00001000;
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00000000;
  94:	12 ba       	out	0x12, r1	; 18

}
  96:	08 95       	ret

00000098 <port_init>:

void port_init()
{
	DDRB = 0b00001000;
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b10110000;
  9c:	80 eb       	ldi	r24, 0xB0	; 176
  9e:	81 bb       	out	0x11, r24	; 17
}
  a0:	08 95       	ret

000000a2 <main>:

}

void port_init()
{
	DDRB = 0b00001000;
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b10110000;
  a6:	80 eb       	ldi	r24, 0xB0	; 176
  a8:	81 bb       	out	0x11, r24	; 17
#include<util/delay.h>


void forward()	// verified
{
	PORTB = 0b00001000;
  aa:	48 e0       	ldi	r20, 0x08	; 8
	PORTD = 0b00010000;
  ac:	70 e1       	ldi	r23, 0x10	; 16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	29 e1       	ldi	r18, 0x19	; 25
  b0:	30 e0       	ldi	r19, 0x00	; 0
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
	PORTD = 0b10110000;
  b2:	60 eb       	ldi	r22, 0xB0	; 176
}

void backward()		// verified
{
	PORTB = 0b00000000;
	PORTD = 0b10100000;
  b4:	50 ea       	ldi	r21, 0xA0	; 160
#include<util/delay.h>


void forward()	// verified
{
	PORTB = 0b00001000;
  b6:	48 bb       	out	0x18, r20	; 24
	PORTD = 0b00010000;
  b8:	72 bb       	out	0x12, r23	; 18
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	9e e4       	ldi	r25, 0x4E	; 78
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x1c>
	PORTD = 0b10100000;
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
  c8:	48 bb       	out	0x18, r20	; 24
	PORTD = 0b10110000;
  ca:	62 bb       	out	0x12, r22	; 18
  cc:	88 e8       	ldi	r24, 0x88	; 136
  ce:	93 e1       	ldi	r25, 0x13	; 19
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <main+0x2e>

}

void backward()		// verified
{
	PORTB = 0b00000000;
  da:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
  dc:	52 bb       	out	0x12, r21	; 18
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	9e e4       	ldi	r25, 0x4E	; 78
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <main+0x40>
  ec:	e4 cf       	rjmp	.-56     	; 0xb6 <main+0x14>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
