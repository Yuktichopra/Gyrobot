
Gyrobot_basic_motion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005e  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000041f  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011e  00000000  00000000  0000063d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000378  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000010d  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a0  00000000  00000000  00000c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <forward>:
#include<util/delay.h>


void forward()	// verified
{
	PORTB = 0b00001000;
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00010000;
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	82 bb       	out	0x12, r24	; 18

}
  74:	08 95       	ret

00000076 <backward>:

void backward()		// verified
{
	PORTB = 0b00000000;
  76:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
  78:	80 ea       	ldi	r24, 0xA0	; 160
  7a:	82 bb       	out	0x12, r24	; 18
}
  7c:	08 95       	ret

0000007e <stop>:

void stop()		// hard stop
{
	PORTB = 0b00001000;
  7e:	88 e0       	ldi	r24, 0x08	; 8
  80:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10110000;
  82:	80 eb       	ldi	r24, 0xB0	; 176
  84:	82 bb       	out	0x12, r24	; 18

}
  86:	08 95       	ret

00000088 <left>:

void left()		// verified
{
	PORTB = 0b00000000;
  88:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	82 bb       	out	0x12, r24	; 18

}
  8e:	08 95       	ret

00000090 <right>:

void right()	// verified
{
	PORTB = 0b00001000;
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00000000;
  94:	12 ba       	out	0x12, r1	; 18

}
  96:	08 95       	ret

00000098 <port_init>:

void port_init()
{
	DDRB |= 0b00001000;
  98:	bb 9a       	sbi	0x17, 3	; 23
	DDRD |= 0b10110000;
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	80 6b       	ori	r24, 0xB0	; 176
  9e:	81 bb       	out	0x11, r24	; 17
}
  a0:	08 95       	ret

000000a2 <main>:

}

void port_init()
{
	DDRB |= 0b00001000;
  a2:	bb 9a       	sbi	0x17, 3	; 23
	DDRD |= 0b10110000;
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 6b       	ori	r24, 0xB0	; 176
  a8:	81 bb       	out	0x11, r24	; 17
#include<util/delay.h>


void forward()	// verified
{
	PORTB = 0b00001000;
  aa:	48 e0       	ldi	r20, 0x08	; 8
	PORTD = 0b00010000;
  ac:	60 e1       	ldi	r22, 0x10	; 16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	29 e1       	ldi	r18, 0x19	; 25
  b0:	30 e0       	ldi	r19, 0x00	; 0
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
	PORTD = 0b10110000;
  b2:	50 eb       	ldi	r21, 0xB0	; 176
}

void backward()		// verified
{
	PORTB = 0b00000000;
	PORTD = 0b10100000;
  b4:	70 ea       	ldi	r23, 0xA0	; 160
#include<util/delay.h>


void forward()	// verified
{
	PORTB = 0b00001000;
  b6:	48 bb       	out	0x18, r20	; 24
	PORTD = 0b00010000;
  b8:	62 bb       	out	0x12, r22	; 18
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	9e e4       	ldi	r25, 0x4E	; 78
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x1c>
	PORTD = 0b10100000;
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
  c8:	48 bb       	out	0x18, r20	; 24
	PORTD = 0b10110000;
  ca:	52 bb       	out	0x12, r21	; 18
  cc:	88 e8       	ldi	r24, 0x88	; 136
  ce:	93 e1       	ldi	r25, 0x13	; 19
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <main+0x2e>

}

void backward()		// verified
{
	PORTB = 0b00000000;
  da:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b10100000;
  dc:	72 bb       	out	0x12, r23	; 18
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	9e e4       	ldi	r25, 0x4E	; 78
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <main+0x40>
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
  ec:	48 bb       	out	0x18, r20	; 24
	PORTD = 0b10110000;
  ee:	52 bb       	out	0x12, r21	; 18
  f0:	88 e8       	ldi	r24, 0x88	; 136
  f2:	93 e1       	ldi	r25, 0x13	; 19
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fc:	d9 f7       	brne	.-10     	; 0xf4 <main+0x52>

}

void left()		// verified
{
	PORTB = 0b00000000;
  fe:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00010000;
 100:	62 bb       	out	0x12, r22	; 18
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	9e e4       	ldi	r25, 0x4E	; 78
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10e:	d9 f7       	brne	.-10     	; 0x106 <main+0x64>
	PORTD = 0b10100000;
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
 110:	48 bb       	out	0x18, r20	; 24
	PORTD = 0b10110000;
 112:	52 bb       	out	0x12, r21	; 18
 114:	88 e8       	ldi	r24, 0x88	; 136
 116:	93 e1       	ldi	r25, 0x13	; 19
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <main+0x76>

}

void right()	// verified
{
	PORTB = 0b00001000;
 122:	48 bb       	out	0x18, r20	; 24
	PORTD = 0b00000000;
 124:	12 ba       	out	0x12, r1	; 18
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	9e e4       	ldi	r25, 0x4E	; 78
 12a:	f9 01       	movw	r30, r18
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d9 f7       	brne	.-10     	; 0x12a <main+0x88>
	PORTD = 0b10100000;
}

void stop()		// hard stop
{
	PORTB = 0b00001000;
 134:	48 bb       	out	0x18, r20	; 24
	PORTD = 0b10110000;
 136:	52 bb       	out	0x12, r21	; 18
 138:	88 e8       	ldi	r24, 0x88	; 136
 13a:	93 e1       	ldi	r25, 0x13	; 19
 13c:	f9 01       	movw	r30, r18
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <main+0x9a>
 146:	b7 cf       	rjmp	.-146    	; 0xb6 <main+0x14>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
